-1.a
C:\Users\bhakti.thombare>node --version
v14.16.1

-1.b
C:\Users\bhakti.thombare>npm --version
6.14.12
=======================
-2.a.1
C:\Users\bhakti.thombare>cd ../..
C:\>node
Welcome to Node.js v14.16.1.
Type ".help" for more information.
> console.log("Hello Node.js!")
Hello Node.js!
***********************
-2.a.2
> 10+10
20
> 20-10
10
> 10*100
1000
> 100/5
20
> 100%3
1

*****************
-2.a.3
> s = 10
10

> t = 5
5

> s > t
true

> s < t
false

> s <= 5
false

> s >= 5
true
>
=======================================================================================================================
-2.b.1
> .help
.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the REPL
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file

Press Ctrl+C to abort current expression, Ctrl+D to exit the REPL
***********************************************************************************************************************
-2.b.2
	-Ctrl+D to exit REPL
=======================================================================================================================
-2.c on REPL
C:\>node
Welcome to Node.js v14.16.1.
Type ".help" for more information.
> function Welcome(name)
{ 
console.log(`${name}`);
} 

Welcome(`Hello Vijay 
Welcome to Blazeclan 
Have A Nice Day!!!`);

Output:-
Hello Vijay 
Welcome to Blazeclan 
Have A Nice Day!!!

=======================================================================================================================
-2.d
> .save F:\first.js
Session saved to: F:\first.js

>Ctrl+D to exit REPL Session
=======================================================================================================================
-2.e
F:\>type first.js
function Welcome(name)
{
	console.log(`${name}`);
} 
Welcome(`Hello Vijay Welcome to Blazeclan Have A Nice Day!!!`);
=======================================================================================================================
-2.f
	-Ctrl+L to clear REPL session
	
	> x = 10
		10
	> _+5
		15
	> _*5
		75
=======================================================================================================================
-2.g
	-autocompletion using TAB key
	-Type Number.
	> Number.
Number.__defineGetter__      Number.__defineSetter__      Number.__lookupGetter__      Number.__lookupSetter__      Number.__proto__
Number.hasOwnProperty        Number.isPrototypeOf         Number.propertyIsEnumerable  Number.toLocaleString        Number.valueOf

Number.apply                 Number.arguments             Number.bind                  Number.call                  Number.caller
Number.constructor           Number.toString

Number.EPSILON               Number.MAX_SAFE_INTEGER      Number.MAX_VALUE             Number.MIN_SAFE_INTEGER      Number.MIN_VALUE
Number.NEGATIVE_INFINITY     Number.NaN                   Number.POSITIVE_INFINITY     Number.isFinite              Number.isInteger
Number.isNaN                 Number.isSafeInteger         Number.length                Number.name                  Number.parseFloat
Number.parseInt              Number.prototype
	
	-Type Global.
	> global.
global.__defineGetter__      global.__defineSetter__      global.__lookupGetter__      global.__lookupSetter__      global.__proto__
global.hasOwnProperty        global.isPrototypeOf         global.propertyIsEnumerable  global.toLocaleString        global.toString
global.valueOf

global.constructor

global.Array                 global.ArrayBuffer           global.Atomics               global.BigInt                global.BigInt64Array
global.BigUint64Array        global.Boolean               global.Buffer                global.DataView              global.Date
global.Error                 global.EvalError             global.FinalizationRegistry  global.Float32Array          global.Float64Array
global.Function              global.Infinity              global.Int16Array            global.Int32Array            global.Int8Array
global.Intl                  global.JSON                  global.Map                   global.Math                  global.NaN
global.Number                global.Object                global.Promise               global.Proxy                 global.RangeError
global.ReferenceError        global.Reflect               global.RegExp                global.Set                   global.SharedArrayBuffer
global.String                global.Symbol                global.SyntaxError           global.TextDecoder           global.TextEncoder
global.TypeError             global.URIError              global.URL                   global.URLSearchParams       global.Uint16Array
global.Uint32Array           global.Uint8Array            global.Uint8ClampedArray     global.WeakMap               global.WeakRef
global.WeakSet               global.WebAssembly           global._                     global._error                global.assert
global.async_hooks           global.buffer                global.child_process         global.clearImmediate        global.clearInterval
global.clearTimeout          global.cluster               global.console               global.constants             global.crypto
global.decodeURI             global.decodeURIComponent    global.dgram                 global.dns                   global.domain
global.encodeURI             global.encodeURIComponent    global.escape                global.eval                  global.events
global.fs                    global.global                global.globalThis            global.http                  global.http2
global.https                 global.inspector             global.isFinite              global.isNaN                 global.module
global.net                   global.os                    global.parseFloat            global.parseInt              global.path
global.perf_hooks            global.process               global.punycode              global.querystring           global.queueMicrotask
global.readline              global.repl                  global.require               global.setImmediate          global.setInterval
global.setTimeout            global.stream                global.string_decoder        global.sys                   global.timers
global.tls                   global.trace_events          global.tty                   global.undefined             global.unescape
global.url                   global.util                  global.v8                    global.vm                    global.wasi
global.worker_threads        global.zlib

=======================================================================================================================
-3
In REPL.js  file// Using repl in JavaScript file
const local = require('repl');
local.start('$ '); // Starting a REPL session

F:\Day1-17August2022 -Git Uploaded\Nodejs\day11>node repl.js
$

-This '$'  Prompt is REPL Session

F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node repl.js
$ 20+10
30
$ 20-5
15
$ 10*3
30

$ .exit

F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>

=======================================================================================================================
-4
-F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\first.js

function Welcome(name){
    console.log(`${name}`);
}

Welcome(`Hello Vijay
Welcome to Blazeclan
Have a NICE day!!!
`);
console.log(`Exiting REPL`);
process.exit();

Output:-
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node first.js
Hello Vijay
Welcome to Blazeclan
Have a NICE day!!!

Exiting REPL
=======================================================================================================================
-5
-F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\cmd_line_args.js

console.log("Command Line Arguments Example");
process.argv.forEach((index,value)=>{
    console.log(`${index} : ${value}`);
});
console.log("End of Program!");

Output:-
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node cmd_line_args.js
Command Line Arguments Example
C:\Program Files\nodejs\node.exe : 0
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\cmd_line_args.js: 1
Number of command line arguments: 2
End of Program!

Also
-F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node cmd_line_args.js Bhakti 25 Female Pune
Command Line Arguments Example
C:\Program Files\nodejs\node.exe : 0
-F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\cmd_line_args.js\cmd_line_args.js : 1
Bhakti : 2
25 : 3
Female : 4
Pune : 5
Number of command line arguments: 6
End of Program!

=======================================================================================================================
-6a)
Format Specifiers: 
%s-Format a variable as a string
%d-Format a variable as a number
%i-Format a variable as its integer part only
%o-Format a variable as an object

-6b)
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\console_methods.js
const n = Number(10);
console.log(`Console Methods Part %i`,1);
console.log('Using Format specifiers');
console.log(`My %s has %d Colors`,`Rainbow`,7 );
console.log(`The number is: %o`,n);  

Output:-
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\console_methods.js
Console Methods Part 1
Using Format specifiers
My Rainbow has 7 Colors
The number is: 10

-count() method-Counting elements
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\console_count.js

const Girls = ['Bhakti','Manali','Bhakti','Mariya'];
const Boys = ['Aman','Mahesh','Indranil','Mahesh'];
Girls.forEach(Girls =>{
    console.count(Girls);
});
Boys.forEach(Boys =>{
    console.count(Boys);
});

Output:-
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node console_count.js
Bhakti: 1
Manali: 1
Bhakti: 2
Mariya: 1
Aman: 1
Mahesh: 1
Indranil: 1
Mahesh: 2

-6c)
-console.trace() method
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\trace.js

F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node trace.js
Trace: Harry Potter and the Philosopher's Stone, On 26 June 1997.
    at Object.<anonymous> (F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\trace.js:2:9)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47
Trace: Trace : the Philosopher's Stone 19
    at Object.<anonymous> (F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\trace.js:3:9)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47
	
-console.timespent() method
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\timespent.js

const doSomething = () => console.log('Testing..');
const measureDoSomething = () =>{
    console.time('doSomething()');
    doSomething();
    console.timeEnd('doSomething()');
};
measureDoSomething();

Output:-
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1>node timespent.js 
Testing..
doSomething(): 9.38ms
=======================================================================================================================
-9 Escape sequence- set of character to identify the colors 
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\esacape.js
F:\Day1-17August2022 -Git Uploaded\Nodejs\day1\color.js

const doSomething = () => {
    for(let i=1; i <=10; i++) {
         console.log('Testing..');
    }
}

const measureDoSomething = () =>{
    console.time('doSomething');
    doSomething();
    console.timeEnd('doSomething');
}
// console.log("Checking Time Spent...");
console.log("\x1b[33m Checking color.... \x1b[0m");
measureDoSomething();
console.log("\x1b[31m This is Error Message.... \x1b[0m");
console.log("\x1b[33m This is Warning Message.... \x1b[0m");
console.log("\x1b[32m This is Success Message.... \x1b[0m");
console.log('\x1b[36m %s \x1b[0m','Hello!')

-Output:-
 This is Error Message....
 This is Warning Message.... 
 This is Success Message....
 Hello!
=======================================================================================================================